package ghost.android.hbapp.giftcard;

import ghost.android.hbapp.LoginAct;
import ghost.android.hbapp.R;
import ghost.android.hbapp.common.GlobalMethods;
import ghost.android.hbapp.common.GlobalVariables;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;
import org.springframework.web.client.RestTemplate;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;

/**
 * @author HyeonWook Kim
 * @email khw0867@gmail.com
 * @classname SendGiftBox.java
 * @package ghost.android.hbapp.giftcard
 * @date 2012. 7. 26.
 * @purpose : 보낸 선물함 관련 Activity
 * 
 */

public class GiftCardSendboxAct extends Activity {
	private Intent intent;

	private TextView title;
	private ListView list;
	private GiftCardBoxListAdapter adapter;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.giftcard_sendbox);



		/********* Title *********/

		title = (TextView) findViewById(R.id.titlebar);
		title.setText("보낸 선물함");



		// find view
		list = (ListView) findViewById(R.id.sendGiftList);

		// 현재 device가 인터넷이 되고 있는지 검사 한 후에, 인터넷이 되지 않을 경우, error dialog 표시
		ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		AlertDialog.Builder netConDlgBuilder = GlobalMethods.checkInternet(cm,
				GiftCardSendboxAct.this);

		//인터넷환경이 원활 할 경우 정보 받아 setting
		if (netConDlgBuilder == null){
			/************ SPF에서 ID 가져오기 ************/
			SharedPreferences spf = getSharedPreferences(GlobalVariables.SPF_NAME_LOGIN, 0);
			String id = spf.getString(GlobalVariables.SPF_LOGIN_ID, "NONE_ID");

			Map<String, String> param = new HashMap<String,String>();
			param.put("id", id);

			// 받은 선물카드 정보 서버에서 가져오기 
			new GetGiftBoxListProgress().execute(param);
		}
		else{
			netConDlgBuilder.show().setOnDismissListener(new OnDismissListener(){
				public void onDismiss(DialogInterface dialog) {
					finish();
				}
			});
		}
	}


	/********** DB에서 보낸 선물 읽어오는 Thread ***********/

	private class GetGiftBoxListProgress extends AsyncTask<Map<String, String>, Void, GiftCardModel> {
		private ProgressDialog loadingDlg;

		@Override
		protected void onPreExecute() {
			// dialog 띄우기
			super.onPreExecute();
			loadingDlg = ProgressDialog.show(GiftCardSendboxAct.this, "알림",
					"잠시만 기다려 주세요...", true);
			loadingDlg.setCancelable(true);
		}

		@Override
		protected GiftCardModel doInBackground(Map<String, String>... param) {
			RestTemplate restTemplate = new RestTemplate();
			restTemplate.getMessageConverters().add(new MappingJacksonHttpMessageConverter());

			GiftCardModel response = restTemplate.getForObject(GlobalVariables.getGiftCardsAsSenderURL , GiftCardModel.class, param[0]);

			return response;
		}

		@Override
		protected void onPostExecute(final GiftCardModel rst) {
			// dialog 사라지게 하기
			loadingDlg.dismiss();

			// 정보를 성공적으로 불러오면
			if(rst != null){
				adapter = new GiftCardBoxListAdapter(GiftCardSendboxAct.this,
						R.layout.giftcard_list_item, rst);
				list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
				list.setAdapter(adapter);

				list.setOnItemClickListener(new OnItemClickListener(){

					public void onItemClick(AdapterView<?> parent, View view,
							int position, long id) {

						// 현재 device가 인터넷이 되고 있는지 검사 한 후에, 인터넷이 되지 않을 경우, error dialog 표시
						ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
						AlertDialog.Builder netConDlgBuilder = GlobalMethods.checkInternet(cm,
								GiftCardSendboxAct.this);

						//인터넷환경이 원활 할 경우.
						if (netConDlgBuilder == null){
							intent = new Intent(GiftCardSendboxAct.this, GiftCardAct.class);
//							intent.putExtra("giftcardIndex", rst.get(position).getIndex());

							startActivity(intent);
						}
						//인터넷 연결이 원할하지 않을 경우.
						else{
							netConDlgBuilder.show();
						}
					}
				});
			}
		}

		@Override
		protected void onCancelled() {
			super.onCancelled();
		}
	}



	/*** Create Option Menu ***/

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, Menu.FIRST, Menu.NONE , "로그아웃");
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch(item.getItemId()){
		
		// 로그아웃
		case Menu.FIRST :
			SharedPreferences spf = getSharedPreferences(GlobalVariables.SPF_NAME_LOGIN, 0);
			SharedPreferences.Editor spfEditor = spf.edit();

			// 정보 지우기
			spfEditor.putString(GlobalVariables.SPF_LOGIN_ID, null);
			spfEditor.putString(GlobalVariables.SPF_LOGIN_NAME, null);
			spfEditor.putString(GlobalVariables.SPF_LOGIN_NICK_NAME, null);
			spfEditor.putString(GlobalVariables.SPF_LOGIN_EMAIL, null);
			spfEditor.putString(GlobalVariables.SPF_LOGIN_PHONE, null);
			spfEditor.putString(GlobalVariables.SPF_LOGIN_BARCODE, null);
			spfEditor.putString(GlobalVariables.SPF_LOGIN_BARCODE_URL, null);
			spfEditor.commit();

			// Launch Stamp_main Screen
			intent = new Intent(GiftCardSendboxAct.this, LoginAct.class);

			// Close all views before launching Stamp_main
			intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(intent);

			// Close Login Screen
			finish();
		}

		return super.onOptionsItemSelected(item);
	}
}
